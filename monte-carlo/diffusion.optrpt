Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C++ Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 17.0.2.174 Build 20170213

Compiler options: -c -qopt-report=5 -xMIC-AVX512 -qopenmp-simd -mkl -o diffusion.o

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: diffusion(int, int, float, float, VSLStreamStatePtr)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (diffusion(int, int, float, float, VSLStreamStatePtr)) [1/1=100.0%] diffusion.cc(6,62)
  -> EXTERN: (9,3) vsRngUniform(int, VSLStreamStatePtr, int, float *, float, float)
  -> EXTERN: (19,12) dist_func(float, float)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at diffusion.cc(12,3)
   remark #25095: Loop Interchange not done due to: User Function Inside Loop Nest
   remark #25451: Advice: Loop Interchange, if possible, might help loopnest. Suggested Permutation : ( 1 2 ) --> ( 2 1 ) 
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.024
   remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 105 
   remark #15477: vector cost: 25.750 
   remark #15478: estimated potential speedup: 3.910 
   remark #15484: vector function calls: 1 
   remark #15488: --- end vector cost summary ---
   remark #15489: --- begin vector function matching report ---
   remark #15490: Function call: dist_func(float, float) with simdlen=8, actual parameter types: (uniform,uniform)   [ diffusion.cc(19,12) ]
   remark #15492: A suitable vector variant was found (out of 2) with xmm, simdlen=4, unmasked, formal parameter types: (vector,vector)
   remark #15493: --- end vector function matching report ---

   LOOP BEGIN at diffusion.cc(15,5)
      remark #25460: No loop optimizations reported
   LOOP END
LOOP END

LOOP BEGIN at diffusion.cc(12,3)
<Remainder loop for vectorization>
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.083
   remark #15301: REMAINDER LOOP WAS VECTORIZED

   LOOP BEGIN at diffusion.cc(15,5)
      remark #25460: No loop optimizations reported
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

diffusion.cc(6,62):remark #34051: REGISTER ALLOCATION : [_Z9diffusioniiffPv] diffusion.cc:6

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   21[ rax rdx rcx rbx rsi rdi r12-r15 zmm0-zmm5 zmm8-zmm12]
        
    Routine temporaries
        Total         :      73
            Global    :      30
            Local     :      43
        Regenerable   :      10
        Spilled       :      10
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :     152 bytes*
            Reads     :      14 [2.73e+01 ~ 6.9%]
            Writes    :      12 [8.50e+00 ~ 2.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
